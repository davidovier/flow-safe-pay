name: FlowPay CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres  
          POSTGRES_DB: flowpay_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Generate Prisma client
      run: |
        cd backend
        npx prisma generate

    - name: Run database migrations
      run: |
        cd backend
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flowpay_test

    - name: Run linter
      run: |
        cd backend
        npm run lint

    - name: Run type checking
      run: |
        cd backend
        npm run typecheck

    - name: Run tests
      run: |
        cd backend
        npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flowpay_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        STRIPE_SECRET_KEY: sk_test_fake_key_for_testing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./backend/coverage

  mobile-tests:
    name: Mobile App Tests  
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json

    - name: Install app dependencies
      run: |
        cd app
        npm ci

    - name: Run linter
      run: |
        cd app
        npm run lint

    - name: Run tests
      run: |
        cd app
        npm test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit (Backend)
      run: |
        cd backend
        npm audit --audit-level=high

    - name: Run npm audit (App)
      run: |
        cd app
        npm audit --audit-level=high

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:latest
          ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-mobile:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [mobile-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Install app dependencies
      run: |
        cd app
        npm ci

    - name: Create Expo build (Development)
      run: |
        cd app
        expo export --platform all --clear
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, build-mobile]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging environment
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Backend image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}"
        # TODO: Add actual deployment commands (e.g., kubectl, helm, terraform)
        
    - name: Run smoke tests
      run: |
        echo "ðŸ§ª Running smoke tests against staging..."
        # TODO: Add smoke test commands
        
    - name: Notify team
      run: |
        echo "âœ… Staging deployment complete!"
        # TODO: Add Slack/Discord notification