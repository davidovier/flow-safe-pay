// FlowPay Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CREATOR
  BRAND
  AGENCY
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRED
  DELETED
}

enum DealState {
  DRAFT
  FUNDED
  RELEASED
  DISPUTED
  REFUNDED
}

enum MilestoneState {
  PENDING
  SUBMITTED
  APPROVED
  RELEASED
  DISPUTED
}

enum DisputeStatus {
  OPEN
  ESCALATED
  UNDER_REVIEW
  RESOLVED
  WITHDRAWN
}

enum DisputeCategory {
  QUALITY
  DEADLINE
  COMMUNICATION
  PAYMENT
  SCOPE
  OTHER
}

enum ResolutionType {
  FULL_REFUND
  PARTIAL_REFUND
  FAVOR_CREATOR
  FAVOR_BRAND
  COMPROMISE
  DISMISS
}

enum PaymentProvider {
  STRIPE
  MANGOPAY
  CRYPTO
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
}

enum AgencyTier {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum AgencyMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  INCOMPLETE
}

enum InvoiceStatus {
  GENERATED
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  hashedPassword          String?   @map("hashed_password")
  role                    UserRole
  country                 String?
  stripeAccountId         String?   @map("stripe_account_id")
  kycStatus               KycStatus @default(PENDING) @map("kyc_status")
  suspended               Boolean   @default(false)
  suspendedAt             DateTime? @map("suspended_at")
  notificationPreferences Json?     @map("notification_preferences")
  deletedAt               DateTime? @map("deleted_at")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  
  // Agency relationship fields
  managingAgencyId        String?   @map("managing_agency_id") // For creators managed by agency
  isAgencyManaged         Boolean   @default(false) @map("is_agency_managed")

  // Relationships
  brandProjects       Project[]           @relation("BrandProjects")
  creatorDeals        Deal[]              @relation("CreatorDeals")
  raisedDisputes      Dispute[]           @relation("DisputeRaiser")
  disputeResponses    DisputeResponse[]   @relation("DisputeResponses")
  disputeResolutions  DisputeResolution[] @relation("DisputeResolutions")
  events              Event[]             @relation("UserEvents")
  refreshTokens       RefreshToken[]      @relation("UserRefreshTokens")
  
  // Agency relationships
  ownedAgency         Agency?             @relation("AgencyOwner")
  agencyMemberships   AgencyMembership[]  @relation("AgencyMembers")
  managingAgency      Agency?             @relation("ManagedCreators", fields: [managingAgencyId], references: [id])

  @@map("users")
  @@index([email])
  @@index([kycStatus])
  @@index([deletedAt])
  @@index([managingAgencyId])
}

model Project {
  id          String   @id @default(cuid())
  brandId     String   @map("brand_id")
  title       String
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  brand       User     @relation("BrandProjects", fields: [brandId], references: [id], onDelete: Cascade)
  deals       Deal[]

  @@map("projects")
}

model Deal {
  id           String    @id @default(cuid())
  projectId    String    @map("project_id")
  creatorId    String    @map("creator_id")
  managingAgencyId String? @map("managing_agency_id") // Agency managing this deal
  currency     String    @default("usd")
  amountTotal  Int       @map("amount_total") // Amount in cents
  agencyFeeRate Decimal? @db.Decimal(5,2) // Agency fee percentage if managed
  escrowId     String?   @map("escrow_id") // Provider-specific escrow ID
  state        DealState @default(DRAFT)
  acceptedAt   DateTime? @map("accepted_at")
  fundedAt     DateTime? @map("funded_at")
  completedAt  DateTime? @map("completed_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relationships
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator      User         @relation("CreatorDeals", fields: [creatorId], references: [id])
  milestones   Milestone[]
  contract     Contract?
  disputes     Dispute[]
  payouts      Payout[]
  invoices     Invoice[]
  events       Event[]

  @@map("deals")
  @@index([managingAgencyId])
}

model Milestone {
  id          String         @id @default(cuid())
  dealId      String
  title       String
  description String?
  amount      Int            // Amount in cents
  dueAt       DateTime?
  state       MilestoneState @default(PENDING)
  submittedAt DateTime?
  approvedAt  DateTime?
  releasedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  deal         Deal           @relation(fields: [dealId], references: [id], onDelete: Cascade)
  deliverables Deliverable[]
  payouts      Payout[]
  invoices     Invoice[]

  @@map("milestones")
}

model Deliverable {
  id           String    @id @default(cuid())
  milestoneId  String
  url          String?   // Link to deliverable (social post, etc.)
  fileUrl      String?   // S3 URL for uploaded files
  fileHash     String?   // SHA-256 hash for integrity
  fileName     String?
  fileSize     Int?      // Size in bytes
  submittedAt  DateTime  @default(now())
  checks       Json?     // Validation results
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  milestone    Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("deliverables")
}

model Contract {
  id                String    @id @default(cuid())
  dealId            String    @unique
  version           String    @default("1.0")
  pdfUrl            String?
  signatureBrand    String?   // Brand signature data
  signatureCreator  String?   // Creator signature data
  signedAt          DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  deal              Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Dispute {
  id                    String          @id @default(cuid())
  dealId                String
  raisedByUserId        String
  reason                String
  category              DisputeCategory
  evidence              Json?           // Array of evidence objects
  requestedResolution   String          // What resolution the disputer wants
  requestedAmount       Int?            // Requested refund amount in cents
  status                DisputeStatus   @default(OPEN)
  priority              String?         // LOW, MEDIUM, HIGH, URGENT
  escalatedAt           DateTime?
  escalatedBy           String?
  resolvedAt            DateTime?
  resolvedBy            String?
  adminNotes            String?
  resolutionTimeHours   Int?            // Auto-calculated field
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relationships
  deal          Deal                  @relation(fields: [dealId], references: [id], onDelete: Cascade)
  raisedBy      User                  @relation("DisputeRaiser", fields: [raisedByUserId], references: [id])
  responses     DisputeResponse[]
  resolutions   DisputeResolution[]

  @@map("disputes")
}

model DisputeResponse {
  id              String   @id @default(cuid())
  disputeId       String
  userId          String
  message         String
  evidence        Json?    // Array of evidence objects
  isAdminResponse Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  dispute         Dispute  @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  user            User     @relation("DisputeResponses", fields: [userId], references: [id])

  @@map("dispute_responses")
}

model DisputeResolution {
  id             String         @id @default(cuid())
  disputeId      String
  resolvedBy     String
  resolutionType ResolutionType
  resolution     String         // Detailed resolution explanation
  refundAmount   Int?           // Refund amount in cents if applicable
  newDeadline    DateTime?      // New milestone deadline if applicable
  actionRequired Json?          // Required actions from parties
  createdAt      DateTime       @default(now())

  // Relationships
  dispute        Dispute        @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  resolvedByUser User           @relation("DisputeResolutions", fields: [resolvedBy], references: [id])

  @@map("dispute_resolutions")
}

model Invoice {
  id            String        @id @default(cuid())
  dealId        String
  milestoneId   String?
  invoiceNumber String        @unique
  amount        Int           // Total amount in cents including tax
  currency      String        @default("usd")
  taxAmount     Int           @default(0) // Tax amount in cents
  taxType       String?       // VAT, GST, NONE
  issueDate     DateTime
  dueDate       DateTime?
  status        InvoiceStatus @default(GENERATED)
  pdfUrl        String?       // URL to generated PDF
  sentAt        DateTime?
  paidAt        DateTime?
  metadata      Json?         // Additional invoice data (tax rates, addresses, etc.)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  deal          Deal          @relation(fields: [dealId], references: [id], onDelete: Cascade)
  milestone     Milestone?    @relation(fields: [milestoneId], references: [id])

  @@map("invoices")
  @@index([dealId])
  @@index([status])
  @@index([issueDate])
}

model Payout {
  id           String          @id @default(cuid())
  dealId       String
  milestoneId  String?
  provider     PaymentProvider
  providerRef  String          // Provider-specific transaction ID
  amount       Int             // Amount in cents
  currency     String          @default("usd")
  status       PayoutStatus    @default(PENDING)
  metadata     Json?           // Provider-specific data
  processedAt  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relationships
  deal         Deal            @relation(fields: [dealId], references: [id], onDelete: Cascade)
  milestone    Milestone?      @relation(fields: [milestoneId], references: [id])

  @@map("payouts")
}

model Event {
  id          String   @id @default(cuid())
  actorUserId String?
  dealId      String?
  type        String   // e.g., "deal.created", "milestone.approved"
  payload     Json     // Event data
  createdAt   DateTime @default(now())

  // Relationships
  actor       User?    @relation("UserEvents", fields: [actorUserId], references: [id])
  deal        Deal?    @relation(fields: [dealId], references: [id])

  @@map("events")
}

// Refresh token storage for JWT refresh functionality
model RefreshToken {
  id          String   @id @default(cuid())
  tokenHash   String   @unique @map("token_hash") // SHA-256 hash of the token
  userId      String   @map("user_id")
  email       String
  role        String
  deviceId    String?  @map("device_id") // Optional device identifier
  userAgent   String?  @map("user_agent") // Browser/app user agent
  ipAddress   String?  @map("ip_address") // IP address when token was created
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsed    DateTime @default(now()) @map("last_used")

  // Relationships
  user        User     @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([expiresAt])
  @@index([tokenHash])
}

// Agency Management Models
model Agency {
  id                      String              @id @default(cuid())
  name                    String
  ownerId                 String              @unique @map("owner_id")
  tier                    AgencyTier          @default(STARTER)
  maxCreators             Int                 @default(5)
  platformFeeRate         Decimal             @default(5.0) @db.Decimal(5,2) // Percentage
  isActive                Boolean             @default(true) @map("is_active")
  companyInfo             Json?               @map("company_info") // Company details, address, etc.
  branding                Json?               // Logo, colors, white-label settings
  createdAt               DateTime            @default(now()) @map("created_at")
  updatedAt               DateTime            @updatedAt @map("updated_at")

  // Relationships
  owner                   User                @relation("AgencyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  memberships             AgencyMembership[]  @relation("AgencyMemberships")
  managedCreators         User[]              @relation("ManagedCreators")
  subscription            AgencySubscription?
  invitations             AgencyInvitation[]  @relation("AgencyInvitations")
  
  @@map("agencies")
  @@index([ownerId])
  @@index([tier])
  @@index([isActive])
}

model AgencyMembership {
  id          String           @id @default(cuid())
  agencyId    String           @map("agency_id")
  userId      String           @map("user_id")
  role        AgencyMemberRole @default(MEMBER)
  invitedAt   DateTime         @default(now()) @map("invited_at")
  acceptedAt  DateTime?        @map("accepted_at")
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // Relationships
  agency      Agency          @relation("AgencyMemberships", fields: [agencyId], references: [id], onDelete: Cascade)
  user        User            @relation("AgencyMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@map("agency_memberships")
  @@unique([agencyId, userId])
  @@index([agencyId])
  @@index([userId])
}

model AgencyInvitation {
  id          String    @id @default(cuid())
  agencyId    String    @map("agency_id")
  email       String
  role        AgencyMemberRole @default(MEMBER)
  inviteToken String    @unique @map("invite_token")
  expiresAt   DateTime  @map("expires_at")
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relationships
  agency      Agency    @relation("AgencyInvitations", fields: [agencyId], references: [id], onDelete: Cascade)

  @@map("agency_invitations")
  @@index([agencyId])
  @@index([inviteToken])
  @@index([expiresAt])
}

model AgencySubscription {
  id                  String             @id @default(cuid())
  agencyId            String             @unique @map("agency_id")
  tier                AgencyTier
  status              SubscriptionStatus @default(TRIALING)
  basePrice           Decimal            @db.Decimal(10,2) // Monthly base price
  perCreatorPrice     Decimal            @db.Decimal(10,2) // Price per creator
  platformFeeRate     Decimal            @db.Decimal(5,2)  // Agency's platform fee rate
  billingCycle        String             @default("monthly") // monthly, yearly
  trialEndsAt         DateTime?          @map("trial_ends_at")
  currentPeriodStart  DateTime           @map("current_period_start")
  currentPeriodEnd    DateTime           @map("current_period_end")
  stripeSubscriptionId String?           @map("stripe_subscription_id")
  stripePriceId       String?            @map("stripe_price_id")
  canceledAt          DateTime?          @map("canceled_at")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")

  // Relationships
  agency              Agency            @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@map("agency_subscriptions")
  @@index([agencyId])
  @@index([status])
  @@index([currentPeriodEnd])
}

// Global indexes removed - they should be defined within model blocks